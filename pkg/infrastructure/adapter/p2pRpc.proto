syntax = "proto3";

package p2pRpc;

option go_package = "./p2pRpc";

enum LogType {
    LogCommand = 0;
    LogQuery = 1;
    LogNoop = 2;
    LogConfiguration = 3;
}

message LogEntry {
    uint64 index = 1;
    uint32 term = 2;
    bytes data = 3;
    LogType type = 4;
}

message AppendEntriesInput {
    uint32 term = 1;
    string leaderId = 2;
    uint32 prevLogIndex = 3;
    uint32 prevLogTerm = 4;
    repeated LogEntry entries = 5;
    uint32 leaderCommit = 6;
}

message AppendEntriesOutput {
    uint32 term = 1;
    bool success = 2;
}

message RequestVoteInput {
    uint32 term = 1;
    string candidateId = 2;
    uint32 lastLogIndex = 3;
    uint32 lastLogTerm = 4;
}

message RequestVoteOutput {
    uint32 term = 1;
    bool voteGranted = 2;
}

message InstallSnapshotInput {
    uint32 term = 1;
    string leaderId = 2;
    uint32 lastIncludedIndex = 3;
    uint32 lastIncludedTerm = 4;
    uint32 offset = 5;
    bytes data = 6;
}

message InstallSnapshotOutput {
    uint32 term = 1;
}


// Rename service P2P
service Rpc {
    rpc AppendEntries(AppendEntriesInput) returns (AppendEntriesOutput) {}
    rpc RequestVote(RequestVoteInput) returns (RequestVoteOutput) {}
    rpc PreVote(RequestVoteInput) returns (RequestVoteOutput) {}
    rpc InstallSnapshot(InstallSnapshotInput) returns (InstallSnapshotOutput) {}
    // Move to different service named Cluster
    rpc Execute(ExecuteInput) returns (ExecuteOutput) {}
    // Rename Configuration
    rpc ClusterConfiguration(nil) returns (ClusterConfigurationOutput) {}
    rpc Shutdown(nil) returns (nil) {}
}

message ExecuteInput {
    LogType type = 1;
    bytes data = 2;
}

message ExecuteOutput {
    bytes data = 1;
    string err = 2;
}

message Peer {
    string id = 1;
    string host = 2;
    bool active = 3;
}

message nil {}

message ClusterConfigurationOutput {
    uint32 electionTimeout = 1;
    uint32 leaderHeartbeat = 2;
    string leaderId = 3;
    map<string, Peer> peers = 4;
}


// service Api {
// }
